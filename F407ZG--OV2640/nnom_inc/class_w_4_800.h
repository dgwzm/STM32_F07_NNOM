#include "nnom.h"

/* Weights, bias and Q format */
#define TENSOR_CONV1D_KERNEL_0 {20, -12, 12, 20, -99, -7, 76, -71, -48, 45, 38, 98, -102, -64, -62, 80, -44, -22, -21, 51, 82, -88, 2, -101, -38, -52, -102, -75, -106, -113, -32, 57, -62, 74, 71, 58, 10, -44, 28, 55, -48, 3, 96, 19, -100, 50, -29, 95, 38, 36, 57, -63, -63, 89, -67, 30, -5, 60, 74, -32, -57, 106, 111, -86, -101, 100, -100, 45, -32, 55, -23, -95, 111, 101, -88, 27, -112, 32, 35, -34, -28, 80, -59, 28, -50, -84, 95, 31, -109, 92, 27, 38, -42, 55, -114, 15}

#define TENSOR_CONV1D_KERNEL_0_DEC_BITS {9}

#define TENSOR_CONV1D_BIAS_0 {0, 0, 0, 0}

#define TENSOR_CONV1D_BIAS_0_DEC_BITS {9}

#define CONV1D_BIAS_LSHIFT {7}

#define CONV1D_OUTPUT_RSHIFT {9}

#define TENSOR_CONV1D_1_KERNEL_0 {-19, -13, 74, 62, 25, 41, -53, 36, 0, -58, 14, -63, 53, -59, 72, -39, 7, 53, -36, 1, -59, 71, 26, -6, -33, 18, 15, -10, -31, 9, -30, -33, 58, 48, 63, -55, -3, -30, -2, -17, 30, -62, 26, 9, -4, -59, 72, 2, 71, -53, -55, -40, -71, -9, -31, -27, -64, 0, 26, -57, 30, 27, -68, 10, -70, -24, 42, 55, 13, 3, 37, -50, -16, -66, 38, 70, -40, 21, 50, 7, 3, 5, 63, -48, 46, 38, 71, 31, -41, -58, 16, -35, 28, 72, 69, -26, -69, 30, 67, 54, 29, 55, 6, -64, 38, 73, -1, 44, 56, -3, 7, -73, 54, 19, 46, -60, 23, 22, 4, 8, 60, 9, -53, 22, -12, -2, -23, 47, 54, -13, -61, -62, 54, -71, 20, -4, -22, -22, 15, 73, -5, -54, 9, 64, -40, -51, -59, 47, -8, -24, 52, 25, -15, 15, 59, -62, -34, -37, -28, 18, 9, -54, 67, -36, 57, -29, 63, -73, 70, 17, 29, -14, 63, -18, -12, -17, -47, -71, -40, -50, 66, 57, -67, -29, -26, -6, -54, 1, -71, 70, -25, -71, 33, -58, -13, -14, 24, 11, 53, -38, -72, -73, 29, -64, 41, -60, -41, -1, 55, -51, 25, -68, 20, -63, 17, -40, -26, -12, -22, -73, 1, -46, 52, -6, -47, -31, -16, 7, 44, -62, 54, 2, 52, -31, -17, 18, 11, -19, 61, -38, -15, 39, -7, 20, -50, -25, -31, -30, -35, -38, -34, 59, 28, 23, -31, -66, 41, -25, -11, 71, 13, 72, 30, -44, 7, 42, 66, -39, -44, -5, -71, 45, -2, 31, 27, 34, 65, 48, -53, 4, 15, -7, -38, -57, -53, -71, 21, 64, 2, -40, 12, -17, -26, 21, -58, 73, 43, 2, 50, -23, -33, 65, -64, 65, -49, -45, -26, -57, -20, 42, 16, 47, 72, -21, -32, 61, 44, 7, 17, 18, 51, 22, 65, 68, 65, 73, 10, 23, 50, -3, 52, -73, 27, -34, -32, 2, -73, -46, -28, -58, -49, -11, -62, 36, -48, 73, 19, 17, 53, 16, -4, -44, -43, 12, -46, -51, 57, 67, -59, 50, -45, 31, -8, 48, -65, -15, -16, -55, -43, 57, 19, -6, -50, 19, -43, 19, -3, 51, 65, -3, 51, 32, -50, 12, 67, 47, 46, 27, -64, -68, -47, 39, 4, 21, -20, -34, -55, 19, -42, 32, -26, 62, 19, 3, 9, -69, 51, -23, 59, 61, -63, 47, -63, -63, -4, -67, 34, 2, -11, 52, -61, 0, 53, -39, -62, 48, -43, -56, 64, 23, 50, -22, 40, 15, 47, 60, -44, -38, 2, 15, 46, 43, -45, 67, 24, -57, 41, -9, 4, -10, -43, 37, -15, -54, 16, -60, 8, -72, -16, -64, -41, -43, 63, -54, -35, -16, 64, 41, -67, 39, -44, 27, -18, 54, -49, 69, 71, 12, 22, 63, -21, -72, 71, 51, -52, 43, -54, 26, 4, -18, -25, 25, 39, -49, -41, 19, -5, -15, -60, 47, -5, -59, -18, -8, 45, -38, -69, 54, 13, -45, 32, 62, -28, 5, -25, 67, 36, -15, -64, 55, -66, 22, 21, 57, 40, 63, -70, -58, 37, 61, 14, 44, -54, -41, -59, 26, -60, -58, -41, 2, 54, 55, 31, 32, -37, -22, -12, -16, -27, -36, -50, -45, -16, 49, -8, -54, 64, 23, -47, 67, -54, 31, 63, -7, 7, -20, 66, 39, 32, 36, -64, 26, -40, 17, 42, -10, 49, 38, -22, 52, 62, 51, 71, -9, -43, 36, 11, 27, -54, -44, -20, 0, -72, 12, 50, -68, -33, -3, 8, 36, -19, -35, 5, 4, -11, -2, -7, 1, 51, 33, 68, -28, 38, 34, -57, 24, -52, 26, -64, 23, -50, -73, 57, 13, 26, 50, -46, 0, 0, -63, -10, 71, 3, -9, 55, -29, -14, 0, 64, 43, -47, 39, 63, 66, 23, 39, -67, -68, 58, 48, -20, -70, -11, -2, 14, 14, -61, 13, 8, -72, 31, -34, -64, 14, -18, 14, -69, -7, 2, 35, -71, 44, -12, 58, 4, 30, 42, -60, -1, 11, -24, 10, -32, 48, 8, -6, -30, 36, -37, 45, -47, 18, 43, 68, 51, -44, 72, 3, 56, -2, 36, -52, 26, -67, -7, -6, 71, 6, 4, -20, -5, 15, -46, -53, 67, -21, 60, -14, 17, 40, 8, -14, -74, -13, 18, -25, 44, 24, 73, 46, 21, 66, -53, 27, 14, 54, 50, 46, -48, 19, 11, 1, 71, -28, -46, -58, 21, 29, 53, -51, -62, 6, 23, -71, -29, -57, -12, -40, 11, 62, -55, -24, 74, 69, 7, 36, 4, -9}

#define TENSOR_CONV1D_1_KERNEL_0_DEC_BITS {9}

#define TENSOR_CONV1D_1_BIAS_0 {0, 0, 0, 0, 0, 0, 0, 0}

#define TENSOR_CONV1D_1_BIAS_0_DEC_BITS {9}

#define CONV1D_1_BIAS_LSHIFT {7}

#define CONV1D_1_OUTPUT_RSHIFT {8}

#define TENSOR_CONV1D_2_KERNEL_0 {45, 15, 22, 41, -52, 6, -21, -44, -63, -54, -66, 9, -50, 29, 47, 77, 18, -61, -36, -26, 25, 47, -75, -3, -46, 9, 22, -19, -63, -8, -3, -75, -17, 38, 2, -74, -46, 33, -18, -48, 33, -2, -45, -54, -47, 12, -71, 15, -3, -5, -62, -34, 56, -69, 15, 23, 65, -35, 31, 73, -61, 38, 31, 8, 13, 28, 34, -76, 75, -7, 63, 29, -58, 19, 23, 49, 79, -32, -61, -23, -32, -7, -18, 11, 78, -36, -21, 59, 25, 63, 57, -60, 28, 38, 0, -45, -41, 31, 7, -46, -47, -17, 60, 46, -50, -8, 62, -80, 27, -36, 15, 59, -54, 40, -10, -20, -19, 78, -60, 64, -36, 18, -17, 31, -60, 31, 19, 6, -47, -63, 41, -79, 11, 8, -56, -62, 65, -54, 46, 66, 20, 20, -25, 46, -52, 52, -26, 38, 12, -11, 45, 32, 52, 70, -78, -30, -22, 19, -48, -15, 64, -31, -16, 16, -36, 39, 61, 21, -59, -5, -65, -10, -2, 61, 16, 32, 71, -57, 34, 62, -10, -51, -49, 76, 50, -62, 63, -71, -3, 51, 26, 76, -27, -40, 34, 23, 57, 73, 65, 56, 40, 65, 44, -5, -46, -67, 21, 60, 29, -61, -73, 73, -55, -6, 20, 71, -54, 42, -64, -47, -10, 0, -2, 3, 52, -53, -79, -43, 27, 29, -49, -71, 28, -32, 67, 1, 75, 50, 70, 45, 80, 32, -2, -53, 2, 58, -35, -66, -9, 31, 64, -7, 63, -65, 13, -15, 2, -61, 35, -4, -37, -58, 36, -54, -51, 61, -28, 68, -22, -4, 34, 20, 14, 22, 23, 33, 71, -51, -17, 33, -45, 0, 20, -44, -6, 40, -60, -72, -64, 32, -57, 42, -45, -15, 42, 3, 26, 63, 3, 15, -14, -35, -20, 71, -31, -12, 53, -37, 44, -29, -1, 25, -47, -60, 58, -42, 60, 60, -67, 67, 54, -57, -26, 17, 36, -9, 52, -79, 3, -40, 39, -63, 34, -44, 32, 55, -18, 72, -37, -67, 41, 13, -67, 80, 46, -14, -44, 59, -76, -20, 9, -35, -16, 13, 46, -39, -47, 53, -47, -26, -46, -45, -54, 56, -49, -8, -69, 59, 63, 67, -6, 31, -74, -75, 54, 12, -33, -50, 14, -65, -15, -52, 59, -79, -40, 64, 49, -34, -74, -44, 49, -66, -66, 35, -9, -29, 56, -4, 16, 24, -30, -31, -44, 81, 16, -53, 55, 21, -40, -44, -25, -8, -1, -24, -44, 63, 1, 80, -50, 34, 59, -32, -78, 8, -13, 5, 63, -1, 80, 50, -50, 37, -43, -9, -31, 27, 29, 15, -64, 61, 2, 18, 39, 64, 80, 12, 11, -80, -8, -60, 32, -47, 50, -43, 46, 42, -15, -28, -37, 20, 39, -78, 19, -78, 46, 1, 23, 51, 10, -24, -23, 57, -52, 21, 6, -42, -2, 21, -72, -16, -39, 38, -13, 79, -51, 76, 0, -63, -37, 20, -29, -3, 8, 29, 77, 60, 8, -12, 58, 67, -75, -25, 27, -56, -26, -12, 45, 60, 52, 41, -8, -9, -6, -1, -77, -55, -56, -54, 10, -72, 34, 11, -56, 78, -9, -48, -48, 39, 81, 14, -16, -62, 66, -6, -66, -23, -9, 40, 79, 46, 48, 54, -81, 66, 47, -36, -26, 15, -27, 30, 66, 63, -31, -10, 14, 1, -63, -42, 74, -3, 55, -9, 24, -56, 63, 62, -32, 75, -50, 40, -16, -18, -36, -31, -7, -11, 1, -19, 69, -33, -5, -13, 7, -42, -19, 7, -53, -12, 55, -30, 71, -66, 26, -3, 76, -46, -25, -13, -14, 55, 40, -52, 13, -18, -40, -29, 56, -60, 13, 40, -50, -2, -1, -20, -77, 22, 67, 25, -43, 37, -59, 46, -16, -11, -79, 65, -55, -41, -61, 64, -30, 62, -70, -42, 52, -71, 54, 37, 25, 52, -57, 56, 72, -32, 74, -23, -43, 25, -21, 43, 33, -58, -44, -59, -58, 9, -52, -28, 26, -9, -60, 16, 15, -15, -62, -55, 25, 37, -28, 21, -50, -14, -24, 58, 53, 12, -79, -1, 45, -78, -34, -69, 16, 58, 43, 19, 14, -9, -64, 10, -58, -4, 42, 50, 51, -43, -25, 58, 13, 49, -73, 15, -6, 31, -60, -29, 76, -56, -47, 15, -49, 41, 9, -79, 56, -31, 0, 65, 63, 3, 45, 15, -46, 53, 30, -71, 21, -51, -73, -33, 51, -34, -47, 80, 28, -11, 43, -65, 26, 13, 5, 11, 62, 61, -6, -19, 81, -39, -24, -18, 6, -62, 32, 73, -47, 0, 1, -66, -16, 19, -61, -9, -4, 31, -17, 25, -15, 78, -32, -11, -7, 16, -29, 10, -81, -16, 48, 29, -70, -65, -17, -41, -24, -65, -40, 57, 61, 2, -70, -5, 66, 59, 3, 45, -25, -29, 55, -16, -64, -76, 56, 66, 30, -59, -9, 38, -65, -41, -11, 70, -33, -10, 59, -70, -55, 69, 31, 75, -43, 36, 46, -81, -7, -75, -74, -37, -32, -64, -21, -65, 66, 18, -28, -4, 40, -44, -55, -79, 32, -11, 52, -20, -17, 21, -3, 58, 62, -24, -37, -9, -77, -44, -43, -48, 60, -21, 6, -79, -15, 32, 11, 32, 73, -25, 43, 10, -74, 72, 34, -54, -64, 49, -75, -62, -24, 27, 77, 29, -42, -72, 54, 26, -57, 68, -80, 20, -29, 33, 60, -72, -48, 43, -5, -4, 76, -70, -36, -24, 54, -44, 40, 69, 45, -8, 8, -80, 78, -56, 68, 37, -41, -19, -40, -7, -63, 50, -15, -62, 12, 35, 45, -10, -7, 23, 45, 21, -54, 23, -80, -9, -38, 59, 78, -39, -76, -6, 33, 24, 34, 78, 45, -4, -3, -6, -65, -75, 12, 30, 60, -37, 1, 50, 10, 3, 24, 45, -77, -57, -68, -52, -17, -19, -65, -72, 17, 16, 68, -74, 29, -75, -44, -66, 32, 29, 32, -37, -31, 66, -69, -76, 57, -51, -8, 38, -6, 60, 35, -77, 65, 22, 78, -54, -12, 61, -46, 48, -16, 6, -22, -43, 32, -23, -28, -38, 26, -31, 52, -33, 32, 38, 74, -38, 39, -53, 77, 71, -30, -58, -72, -46, -21, 64, -66, 26, 78, 78, -18, -3, 48, -39, -71, 49, -50, 0, -45, 0, 69, 14, -14, 36, -31, 27, 1, -48, 20, 18, 31, 60, -18, -47, -68, -13, 44, -44, -18, 0, 8, 11, 17, 5, -77, 22, -59, -12, 22, -37, -57, 55, 46, -33, 65, -30, -5, 68, -1, -23, -56, 47, 20, -54, 41, 27, 69, 77, -37, 38, 12, 30, -37, 19, 5, 30, -70, -74, 73, 71, -11, 69, 49, 6, 31, 18, -12, -17, -4, 76, 74, -69, -33, -10, -77, 53, -11, -21, -44, 23, 66, 52, -63, 21, 20, -11, 42, 70, -3, -51, 36, -47, 45, 54, 47, -35, 27, -69, 13, 25, 46, 47, -20, 56, 16, -48, 81, -65, 17, -20, 53, -20, 54, 22, -67, -14}

#define TENSOR_CONV1D_2_KERNEL_0_DEC_BITS {9}

#define TENSOR_CONV1D_2_BIAS_0 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

#define TENSOR_CONV1D_2_BIAS_0_DEC_BITS {9}

#define CONV1D_2_BIAS_LSHIFT {8}

#define CONV1D_2_OUTPUT_RSHIFT {9}

#define TENSOR_CONV1D_3_KERNEL_0 {-55, -7, -38, 27, -15, 58, 0, -22, -40, 21, 57, 22, 44, 9, -54, 12, 17, -4, -31, 55, -71, -1, -1, -43, -4, 19, -21, 32, 50, 56, 55, -14, 10, -21, 62, -11, 17, -61, -38, -14, 30, -51, -12, 35, -10, -58, 18, -32, -33, -41, 67, 3, -53, 53, -2, 25, 69, 31, 27, -63, 38, -1, -21, -10, 25, -31, -38, -44, 15, 39, -61, -59, -56, -20, -17, 47, 61, -43, -9, 30, -55, -12, 71, -11, -44, -64, 40, -19, -37, -67, 71, 66, 29, -36, -20, 60, 2, 0, 59, -61, -29, -3, 62, -25, -30, 48, 33, -2, -16, 49, -45, -50, 27, -10, 33, 41, -61, -9, 32, -72, 27, -59, 59, -1, 57, -1, 28, -58, -4, 16, 68, 68, 18, -44, -19, 18, -53, 55, 42, 70, 21, 35, 52, 13, -22, 23, -72, 4, 45, 74, 54, 47, -23, 26, -23, 18, -28, -45, -24, 73, -12, -48, 36, -42, 39, -18, 39, 71, 0, 36, -72, -59, 60, -66, 45, -9, 56, 57, -30, 73, -41, 16, -15, -64, -71, -4, -9, -68, 69, 64, -42, 41, 32, 9, -62, -9, -36, -68, 53, 26, 51, -24, 3, -6, -2, -55, -4, -69, 35, -57, 13, -61, 47, 48, 39, -14, 44, 41, 69, 28, -23, -13, 32, -40, 58, 56, 48, -23, 24, 14, -29, 59, -4, 63, -19, -42, 51, -3, 18, -23, 52, 8, 33, -26, -73, 69, 71, 29, -72, -25, -4, 58, 36, -40, 64, -20, 68, 42, -51, 20, -39, -52, -33, -71, -28, 12, -1, 15, -48, -31, -22, -5, -10, -39, 36, -39, -10, -39, -53, -58, 29, 53, 20, -62, 0, 44, -56, -72, -2, -72, -47, 54, 22, 1, 28, 61, -40, -31, 5, 70, 35, 62, -1, 45, 5, -21, -71, 22, 59, 12, 49, 41, 72, 19, 45, -55, 42, 7, 11, 58, 1, -33, 8, 65, 66, 11, 39, 65, -19, 14, -28, 6, 42, -63, -14, 52, -12, 40, -47, -53, 61, 37, 44, 56, 5, 17, -5, 14, -47, 5, 42, 52, -26, 5, 29, 0, -67, -8, -7, 64, -54, 24, 18, 52, 17, 33, 64, 8, 20, -7, -43, -37, -52, 71, 61, 67, 55, 40, -3, 51, 12, 26, 34, 39, 1, -52, 29, -46, -4, -55, -70, -24, -19, 70, 46, 53, 64, -31, -19, -35, -67, 64, -19, 16, 1, 38, -34, 17, -14, 5, -12, -13, -51, 56, 25, -24, 40, -38, 33, -8, -6, -50, 61, 62, -30, 68, -25, -38, -60, -48, -50, -48, -37, -53, -44, -44, 57, 52, 63, 50, -38, -30, -35, 4, 27, 52, -51, 28, 61, -16, -5, -35, -38, 58, 66, 70, 30, 42, -18, 59, 15, -49, 25, -36, -25, 55, 43, -13, -40, 6, 73, -46, -13, -54, 70, -15, 48, 73, -27, 57, 63, -62, 30, -37, -4, 4, 60, -31, 0, -55, 0, -46, -8, 3, -46, 9, 18, 51, 36, 16, -21, -64, -41, -67, 25, 8, -7, 20, -69, 57, -46, -63, -37, 15, 47, -67, -29, 57, 61, 31, 53, 55, 70, -54, 7, -59, -2, -17, 15, 57, 33, -18, 40, -4, -52, -54, -45, 56, -45, -46, -7, -61, 15, -3, 16, -19, -2, -48, -13, -68, 26, -22, -13, 44, 52, 60, 19, -46, 41, 16, 26, 48, -28, -68, 7, 29, 19, -39, -6, -47, -26, 14, 56, -52, 23, 37, -3, -68, -59, 20, 41, 46, -2, -5, 51, -41, 21, -59, 65, -26, -30, 51, -9, 38, 71, 24, 48, -55, -30, -21, -10, 2, 33, -68, 22, 22, -70, -17, -51, 18, -62, 41, 18, -59, 36, -8, -3, 36, 57, -54, -30, 19, 46, -3, 41, 36, -22, -68, -30, 25, -43, -51, -37, 2, 70, 68, 70, 1, -13, -61, -4, 61, 24, -46, 1, 46, -19, 1, 55, -51, -49, 39, 5, -65, 66, -22, 17, 71, -16, 17, -5, 68, -7, 16, -20, -2, -33, 52, -39, 6, -34, -65, 15, -13, 25, 45, -25, 72, -27, 26, 54, 5, -69, -64, 59, -14, 31, -35, -55, 55, -51, 26, -50, 51, -13, 7, 64, 15, 10, 31, 44, -4, -17, -18, -63, 49, 27, -53, 59, -33, 39, -19, -4, 49, -47, -48, -27, -50, -40, -15, 31, -31, 8, -68, -58, -38, -67, -44, -15, 54, -2, 6, -19, 53, -64, 73, 45, -14, 4, 19, -19, -43, -26, 1, 47, 45, 13, -55, -46, -47, 25, -11, -48, -57, -1, -68, 52, 0, -35, 40, 47, -54, 35, 15, -30, -70, -23, 41, 61, 50, -58, -71, 39, 38, -55, 37, 26, 34, -44, -58, -36, 33, -53, -37, 29, 24, 36, -37, -48, 39, -8, -34, 61, 22, -2, -45, 45, 40, 62, -38, -36, 20, 61, 70, -59, 45, -23, 52, -33, -67, 48, 55, -31, 14, 57, 56, 13, 28, -54, -5, 8, 20, 0, -68, 2, -27, -10, 57, -47, 66, 38, -65, -15, 70, 15, 70, -29, 61, 72, -51, -33, -23, -45, 1, -41, -31, -37, -5, -10, 10, -19, 24, 41, 73, -8, 31, -74, -49, -14, -66, -61, -55, 2, -47, 64, -25, -24, 26, -50, 67, 14, 16, 38, 19, -3, -51, -33, -57, 28, 25, -63, 5, -23, -16, -27, -25, 65, -56, -39, -23, 16, -20, -29, -70, -24, -9, -27, -70, -17, 65, 20, -6, 24, 12, 10, -35, 25, 71, -23, -18, 62, 41, -3, -54, 74, 13, -49, -30, 50, 70, 9, -41, 73, -28, 37, 48, 2, 7, 42, -18, -49, 71, 44, -32, 18, 40, -18, 56, -71, 48, 13, 72, -2, 2, 72, -41, -29, 36, 53, 6, -37, 9, -35, 16, 29, 39, -17, -10, 25, 30, 30, 22, -14, 53, 13, -64, 43, 23, 72, -52, 72, 16, -23, -42, -51, 69, 58, -36, -15, -64, -18, -32, -1, 39, -6, -9, 61, -3, 27, 59, -62, 51, -63, -11, -30, 61, 34, -47, -72, 28, -22, -40, 50, -66, 24, -73, 50, 22, -65, -64, -58, 16, 67, 3, -74, -29, 39, -36, -51, -6, 68, -44, 47, 23, -13, -63, 43, -57, -65, 11, 41, 65, -2, -58, -70, -39, 29, 63, -22, -63, 22, 33, 29, 25, 44, 65, -25, 72, -54, 65, 42, 23, 39, 56, 50, 55, 49, -25, -14, -22, -72, -9, -51, -30, 32, -7, 30, -39, -46, 50, -11, 65, 6, 62, -38, 45, -7, -55, 9, -64, -6, -34, -17, -66, 56, 23, -6, -54, 7, -24, -66, 41, 44, -24, 15, -35, -50, 32, -42, -51, -58, -55, 9, 16, -1, -33, -64, -45, -7, -33, 72, 49, 46, -68, -9, -12, 64, 0, 39, -51, -48, 0, -58, 26, -11, 73, 50, -60, 64, 15, 23, 72, 5, 31, 1, -10, 5, 3, -45, 43, -55, 28, -63, 18, -34, 10, 18, 17, -5, 73, 42, 55, -47, -65, -52, 2, -55, 54, -5, 49, -40, 54, -40, 71, 43, -34, -11, -37, 16, -13, -35, 60, 34, 6, -21, -50, 14, -4, 11, -15, 56, -18, 23, 33, 62, 62, 66, 73, 38, 24, 51, 55, -39, -41, -73, -28, 38, 18, -58, 34, 71, -71, 59, 50, -24, -35, -16, -64, 38, 9, 59, 36, 71, 31, -11, 73, -22, 57, -68, 1, 46, -11, -56, 6, -70, 55, 20, -62, 0, -2, 28, 26, -52, -3, -61, 17, -21, 31, 52, -29, 72, 59, -28, 71, -29, 68, 22, -4, 30, -31, -51, 23, 8, 48, 21, -69, 28, -71, -45, 43, 65, 32, 60, 61, -37, -69, -3, -54, 70, 34, -27, -68, 68, 28, 57, 54, 18, -24, -64, -39, 26, 49, -58, -51, -57, -30, -16, -34, -51, -23, 24, 3, -46, -14, -34, 1, 29, -56, 72, 58, -50, -25, -32, -5, 13, 6, 40, 64, -16, 25, 60, -45, -70, 65, 15, 24, -56, -59, 45, -61, -19, -35, -56, 26, -9, -15, -10, 10, 3, -11, 47, 1, -4, 33, -25, -18, 39, -28, 49, -34, -7, 0, 66, 30, -16, -24, -37, 33, 8, -1, 9, 14, -12, -42, 28, -54, 49, -35, 32, -18, -50, -9, -6, -69, 12, 47, -33, -55, 31, 9, -7, 29, -42, 65, -13, 1, -16, 49, -16, 9, 15, -17, -18, 46, -6, -46, 25, 57, -64, -52, 58, -45, -20, -47, -35, -28, -16, -73, -29, 2, -28, 40, -13, 27, -48, 26, 28, -19, -22, -41, 28, -23, 9, -41, 13, -65, 51, -26, -57, -14, 38, 8, 7, 16, -10, -18, -35, 12, -45, 70, 25, -22, 44, -58, -11, -14, 24, -62, 40, -60, -65, 67, 12, -14, -4, -67, -7, -16, -38, -49, 31, 19, -71, -72, 25, 52, -33, 40, 71, 72, -17, -10, 24, -15, 8, 18, 72, 19, 61, -48, -4, 39, 0, -67, -20, 53, -71, -43, -17, 72, -40, 17, -40, -74, -55, 46, -52, -53, 38, 64, -18, -43, 37, -46, -2, -46, 69, -55, 56, 58, -73, 5, 53, 68, 0, 54, -71, -28, 17, -18, -53, -1, 13, -35, -38, -1, -65, -22, -30, 65, 65, -34, -19, -29, -14, 9, -8, 36, -33, 3, 46, 57, 66, -19, -50, 52, -56, 51, 47, 30, 44, -35, 57, -4, -64, 66, -22, -23, 73, 30, -39, 11, -49, 17, 27, 72, -7, -26, -13, 28, 9, -65, 45, 55, -40, 48, 6, 46, -73, 22, 39, 45, 26, 65, 4, -3, 5, -15, 49, -30, 15, -17, -49, -6, -34, 36, -24, -29, 45, -18, -71, -21, 33, -5, -6, -41, 54, -8, -39, -24, -12, -7, 61, 20, -61, 43, -5, 74, -40, 39, -57, -16, -27, -43, -40, -56, -73, 71, -8, 3, 19, -66, 53, 20, -26, 30, 61, 34, 60, 51, -15, 58, 14, -30, -50, 33, 57, 35, 14, -61, 38, -8, 41, -38, -69, 63, 70, -23, 60, 67, -25, 12, 60, -12, 57, 56, -35, 55, 5, 9, -36, -14, -13, -39, -29, 70, -43, -18, 45, 19, -30, 60, -37, -52, 22, 23, 21, 5, -37, -66, 37, 63, 32, -36, 50, 43, 72, 51, 16, -69, 11, 16, -38, 67, -60, 4, 57, -10, -71, 63, 0, -27, 7, 48, 59, 48, -71, -39, -11, -49, 58, -73, -33, -7, -29, 8, -50, -57, 18, 4, -58, 47, -7, 61, 16, -40, -15, -60}

#define TENSOR_CONV1D_3_KERNEL_0_DEC_BITS {9}

#define TENSOR_CONV1D_3_BIAS_0 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

#define TENSOR_CONV1D_3_BIAS_0_DEC_BITS {9}

#define CONV1D_3_BIAS_LSHIFT {8}

#define CONV1D_3_OUTPUT_RSHIFT {8}

#define TENSOR_CONV1D_4_KERNEL_0 {114, -76, 24, -60, 9, 109, -31, -110, 71, -25, 70, -27, 44, 93, 67, -62, -84, -18, -7, 94, 28, -16, 79, -41, 79, -3, -41, -22, 113, -54, -98, 18, -87, -61, -4, 17, 71, 98, -103, -55, 66, 62, 84, -9, -3, 97, -24, 3, -57, -103, -87, -83, -80, 76, -76, -43, 18, 34, -6, 32, -82, 34, -68, 9, -5, -96, -61, -57, -1, 76, -62, 3, 25, 52, 56, 39, 41, 8, -43, 80, 29, 93, 43, -54, 47, 64, -25, 43, -105, -7, -91, 46, -108, -26, 84, -15, -72, -87, -32, -71, -40, -54, -26, 19, -96, -18, -78, 101, 28, 95, 45, -80, -78, 73, 41, -79, 84, -107, -46, -46, 1, 90, -81, -18, -39, -30, 67, 53, -66, 64, -69, 83, 46, -15, -18, 4, 24, 57, 45, -18, 62, 14, -45, -10, 35, -77, 33, -23, -26, 107, 95, -12, -1, -20, 83, 92, 36, 7, 9, 16, -27, 52, 14, -112, -37, -68, -71, 51, -99, -86, 35, 80, 105, -55, 86, -10, 94, 26, -107, -107, -100, 68, -81, -64, -42, -24, 44, 83, -90, -42, 47, -38, 106, -41, -22, -86, 114, -51, -35, -52, -109, 79, 11, 32, 74, 10, 91, -73, -45, 32, 60, 24, 49, 91, -25, -60, -103, -108, -84, -85, -50, 106, 37, 109, -25, 105, -24, -93, -53, -49, -70, 37, 4, -91, -97, 38, 4, -82, -23, -20, -81, 54, -107, -30, -37, -64, 37, 11, 74, -54, -93, -17, -64, 76, 51, -104, 67, 99, -33, 109, 68, 74, -62, 29, -68, -92, -13, 55, -57, 7, -46, -43, 76, 77, 97, 113, 97, 39, 44, 89, 43, -46, -15, 111, -50, -36, -46, -71, -8, 114, 95, 21, 18, 112, 16, 26, 102, 101, 10, 105, 80, 70, -45, -90, 110, 51, -62, 75, 48, 56, 111, -50, -102, 1, -37, -64, -86, 92, -69, -13, 7, -29, -58, -60, -111, 74, -80, -31, 75, 88, 79, 86, 98, 110, 77, 23, -103, -32, -37, -56, -101, 8, 65, 78, 99, 2, 61, 39, -114, 94, 93, 72, -39, -26, 105, -82, -72, 87, -22, 60, -112, 24, 90, 40, 99, 108, 2, 13, 77, 65, 24, 10, -73, -71, 3, 26, 84, 0, -97, -16, 99, 110, 93, 72, 83, -60, 59, -61, 57, -74, -56, -51, -103, 58, -22, -54, -47, -7, 31, -49, -109, 12, -60, 9, 26, 11, 61, 77, 8, -35, 12, -100, -110, -103, -89, 58, -58, -13, 83, -16, -102, 23, -43, -71, 8, -8, 90, 53, 34, 72, 57, -78, -112, -33, 9, -47, -1, 90, -12, 67, -77, 74, -9, 52, -102, -105, 77, -14, 33, 89, 71, -32, -51, -59, 8, -45, 86, -38, -48, 84, 72, -1, -107, -45, 50, 112, 7, 12, -53, -2, 6, -93, 53, -34, 12, 38, -45, 72, -55, 89, 1, -21, 42, -39, -92, 10, 73, 30, -4, -13, 21, -44, 56, 35, -36, -64, -37, -17, 32, -2, 42, -82, 86, 19, -80, 53, -9, -86, -37, 62, 35, 96, -26, 53, 112, 64, -33, -2, 13, -32, 98, -101, -36, -5, -58, -13, 30, -79, 47, 102, 96, 20, 34, 100, -34, -54, -34, 86, -62, 24, 16, 39, 72, 93, -100, 22, 41, 13, 105, -79, -29, -63, 16, -29, 102, -86, 32, -79, -56, 112, 22, -112, 106, 26, -87, -90, -107, -81, -4, 80, 8, 93, 92, 87, -82, -80, -24, 69, -114, -64, -51, -69, -15, -84, -16, -89, -27, -112, 34, 30, -11, -40, 50, -73, -44, -81, 40, 22, 92, -18, -41, -78, -63, -58, 18, 84, -64, -46, -102, -60, 1, -109, 102, -68, -24, 1, 1, 10, 27, -91, 69, 0, -10, 8, -44, 31, -55, 61, -77, -75, -75, -37, 86, 45, -60, 69, -99, -58, 100, -89, 40, 54, -13, -71, -77, -114, 29, -9, 114, -89, -64, 62, 35, -51, -34, 106, -26, 62, 3, -38, -33, 16, 52, 55, 107, 13, 109, 35, -96, -98, -11, 111, -21, -60, 7, -110, -32, -3, 108, 31, 67, 51, -14, 70, 50, 73, -99, -85, 29, 76, -96, -2, 40, -46, -97, -22, -114, -100, 87, -11, 15, -98, 11, -23, 6, -110, 80, -68, 78, 67, 38, 5, -8, 60, -11, 2, -3, 28, 54, 102}

#define TENSOR_CONV1D_4_KERNEL_0_DEC_BITS {9}

#define TENSOR_CONV1D_4_BIAS_0 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

#define TENSOR_CONV1D_4_BIAS_0_DEC_BITS {9}

#define CONV1D_4_BIAS_LSHIFT {9}

#define CONV1D_4_OUTPUT_RSHIFT {8}

#define TENSOR_DENSE_KERNEL_0 {-19, -81, -118, 48, 1, 77, 90, 120, 93, 119, -24, -66, 37, -75, -93, -122, -98, -43, 42, 124, -36, -26, 50, -16, 89, -77, -72, 113, -124, 0, -18, -19, 57, -3, 13, -114, -102, 15, -11, -67, -43, -27, -37, -45, -28, 52, -31, -55, 122, 110, 69, -108, 100, -46, -9, -26, -25, 15, 88, -33, 44, -65, -14, 6, 46, 41, -4, -8, -20, -22, -126, 57, -121, -45, 40, -100, 121, 95, 51, 8, 96, 96, 9, -27, -68, -41, -76, 115, -126, 12, 51, 83, -1, 85, 122, -27, 33, -13, 90, 2, -61, -94, 23, 10, -10, -74, -98, -17, 84, 85, 75, -125, 102, -19, -58, -26, 84, 123, -30, -5, -93, 113, -91, -47, 53, -59, -25, -91, 103, -60, -105, -1, 94, 62, 111, 94, -72, -93, -50, -30, 40, 3, -70, -71, -110, 58, -94, 82, -75, -107, -120, -128, 113, -26, 46, 24, 125, 79, 54, -47, -24, -8, -115, -83, -110, 8, -83, -19, -41, -83, -68, 18, 23, 121, -2, -53, -127, -79, -53, 4, -47, 1, 13, -59, -127, 68, 108, 49, -115, -72, 107, -6, 104, 115, 15, -116, -102, 72, 57, 116, -119, 121, 30, -27, 17, -3, 77, 11, -82, 30, -31, -70, -87, 91, 40, -29, 36, -24, 98, -27, 122, 84, 92, 72, 32, -20, -57, 37, -65, 74, 48, -114, 106, 9, -30, -113, -72, -26, 65, -30, 2, -95, 99, 31, -53, -114, 74, -73, 6, 48, -51, 62, -49, -71, -22, 80, -23, -69, -86, -114, -4, 72, -110, 6, -101, 91, 58, -93, -108, -98, 117, 108, -26, -36, 117, 22, 68, 11, 47, -113, 108, -101, 36, 45, 82, 61, -8, -87, 22, -17, -89, 83, 101, 20, -79, 57, 73, -88, 116, -45, -77, 8, 28, -17, -38, 109, 98, -78, -87, -107, 59, -119, -17, 80, 97, 83, -109, -115, 113, -59, -121, -69, 22, -34, -93, 31, -117, -58, 4, -110, 25, -123, -6, 41, 65, -40, -113, 43, -64, 119, 20, -121, -98, -127, -115, 54, -84, 42, -97, 91, -89, 53, 119, -4, 66, 124, -108, 36, 117, 26, -50, 21, -38, -98, -22, -64, 90, -82, 25, -118, -19, -50, 58, -84, -75, -12, 51, 79, -108, 15, 107, 122, 55, 82, 101, 110, 37, -110, 115, 19, 74, -33, -93, -64, 77, 22, -125, 4, -120, -29, -3, 46, -123, 16, 12, 45, 77, -28, 25, -81, 113, -114, 109, -52, 14, 126, 96, 40, -81, 70, -43, -118, -119, 90, 49, -43, -48, 73, -39, -77, -88, 74, 105, 45, -96, -35, 57, 24, 58, -126, 119, -69, -10, 81, 109, 70, -64, -88, -82, 103, 73, -12, 37, -51, -93, -4, 103, -71, -41, 84, -6, -121, 49, 72, -117, -69, -88, -95, 34, 92, -110, -93, 120, 62, -113, -56, 116, 27, -6, -123, 55, 121, -18, 73, 55, -61, 127, 36, -91, -99, -44, -59, -89, 99, -59, 47, 64, 124, 26, 105, -107, 44, 65, -34, -89, -106, 36, 19, -86, 42, 120, -55, 6, -121, 46, 6, 33, -76, 86, 72, 84, 107, -57, -62, -88, 102, -49, 112, 57, -4, -106, 15, 9, 17, 63, -116, -111, -33, 127, 68, 57, -7, 63, -87, 68, -37, -77, -119, 70, 112, 34, -38, -89, 26, -6, 84, -49, -112, -106, -97, -87, -121, -13, -25, -127, 62, 115, -109, -97, 70, -120, 102, -39, -110, -15, -22, -79, -61, -70, -87, -115, 67, -114, -27, -127, -76, 68, -53, -9, 42, 113, -16, -90, -114, 71, -96, 54, 119, 1, 55, -1, -71, -72, 81, -54, 116, 15, -93, 26, -98, -104, -34, 44, 103, 51, 81, 19, -2, 92, 22, -47, -33, 48, -94, -122, 76, 76, -18, 122, 107, 36, -111, -78, 123, -73, -102, -96, -88, 70, 67, -79, -35, -81, -97, 64, -39, 77, -101, 30, -53, -63, -92, 107, 60, -39, 6, -1, -126, 115, 25, 30, 33, -69, -125, 41, 38, -62, -88, -95, -12, 12, -92, 93, 86, 117, 49, -62, -125, -82, -69, -15, 43, 75, 74, -14, 122, 27, -64, -100, 57, 78, -109, 100, -104, 72, -30, -35, -44, 78, 7, -45, -100, 67, -44, 52, -6, -76, 107, 106, -73, 16, -30, 75, 74, 41, 20, 17, 32, -101, 50, 20, -85, -76, 27, 1, -9, 42, -14, 89, -54, 42, 59, 54, -42, -60, 55, 83, 31, -21, 121, 43, 98, -14, 46, -113, 79, -66, 113, 121, -58, 108, -49, -32, 86, -121, -24, -34, -11, 63, -127, -122, 2, 124, -84, -72, -13, -18, -42, -40, -83, -91, -77, 99, 68, -51, -93, -91, 51, 2, -36, 107, -112, -48, -23, -42, 117, 118, -2, -24, 71, -23, 54, 20, 17, 44, -74, -105, 21, 3, 31, 40, 111, -76, 37, 36, 43, 77, 36, -120, -112, -73, 12, 32, 36, -54, -112, 91, 117, -78, 101, -106, 75, 124, 25, -21, 25, -110, 94, -117, -58, -16, 98, -119, -96, -119, -70, 39, 109, -51, 115, 100, 94, 13, 103, 71, -71, 105, 15, 23, 108, 101, -116, -118, 92, -101, -17, 21, 16, 10, 25, 15, 4, 111, 33, -120, 91, 100, 64, 74, -107, 15, 89, 32, -37, -119, 35, -28, -104, 112, 101, 114, -87, 33, 63, -57, -119, 83, -97, 53, 24, -122, 50, -37, -6, -30, 93, -56, 27, 101, 75, 61, -54, 27, 97, -121, 127, 32, 101, 0, -96, -56, 115, 99, -118, -27, -22, -7, -18, -84, -103, 74, 47, -66, -109, 37, 12, 11, -12, 44, -79, -121, -61, 104, -77, -93, 127, -118, 10, 97, -53, 71, 107, 77, 12, -33, 120, -22, 39, -73, -62, -45, -10, -38, -14, -106, 8, 25, -73, -47, 121, -59, -83, -100, 63, 99, -30, -104, 47, -18, 14, -91, -56, -74, -106, -96, 91, 121, 90, -83, -52, 42, -55, -66, 111, 13, 29, -33, 120, 7, -22, 18, -107, 36, -28, 78, 35, -77, -6, -59, -32, -123, -61, 52, 28, -41, 4, -126, 63, 89, -113, 31, -33, 106, -49, 17, -122, 86, 19, -116, -53, 101, 37, 76, 57, -96, -67, -13, -68, 26, 113, 71, 26, 91, -98, -32, -31, -1, -95, -61, -94, 35, 44, 20, -87, -61, -113, 9, -57, 35, 66, -100, 76, -89, 108, 56, 57, -24, 49, -74, 28, -122, -91, -88, 108, -3, -114, 17, 106, 19, -77, 4, 107, -78, -38, -2, -88, 29, -120, -52, 36, 83, 61, -74, 38, -65, -40, -63, 37, -90, 122, -6, 4, 121, 51, 31, -122, 81, 124, -17, 19, 82, -102, 18, 105, -99, -52, 38, 13, -71, -34, -82, -45, -84, -120, 95, 22, -71, 85, -100, -79, -34, 24, 21, 78, -41, -4, -103, 79, 33, -110, 123, 61, 52, -28, -110, 94, -41, -57, 46, -36, 87, -81, -86, -98, 21, -114, 76, 7, -86, 123, -70, -80, 7, 24, -57, -105, -2, -23, -94, 102, 20, 30, 108, 112, 35, -112, 35, -63, -51, -120, -80, -111, -98, -8, 40, 103, -37, -124, -45, 52, 127, 54, 109, 35, 101, -113, 77, -19, -95, -34, -79, -32, -34, 15, 10, -3, 94, 16, 39, 109, 120, 19, -15, 53, -48, 114, 127, 6, -73, -101, -107, 118, -79, 112, -68, -7, 111, -88, -4, -7, 93, -22, -125, 95, -87, -74, 79, -50, -43, 108, 49, 121, -5, 35, 38, -50, -76, 58, -47, -91, -90, -43, -32, 38, 68, -8, 97, 61, -27, -34, -6, 78, 35, 124, 107, -50, 17, -85, 99, -27, 93, 68, 54, 122, -115, -119, 76, -56, 96, -12, 44, 75, 1, -77, 48, -53, 28, 77, 57, 99, 39, -58, 55, 3, 104, -53, -23, 21, -126, -46, 9, -30, -104, 104, 63, -88, -60, -94, 66, -44, 32, 77, 13, -45, -124, 61, 39, 78, 33, 38, -30, 74, 56, -70, 115, -23, 46, 109, 127, -28, -83, -114, -51, 12, -39, 87, 119, -116, 9, 53, -22, -73, -80, 86, 93, 13, 76, -18, 20, 17, 58, -95, -15, -51, 2, 37, 70, 59, -16, 34, 79, -121, 89, -87, -33, 6, 65, -56, -80, 29, -32, 113, 29, 65, 5, 82, 54, 90, -92, 92, -88, 6, 44, 41, 78, -87, -95, -56, -23, 44, -83, -5, -78, 39, 98, -62, -11, -93, 61, 83, 82, 9, -108, -3, -47, -71, 38, 111, 88, 124, 65, 109, -58, -78, -17, -28, 21, 86, -90, -76, -91, -27, 96, 29, 42, 35, -77, 43, -23, 98, 10, 104, -84, -118, -60, 38, -113, -128, 26, -53, -8, -47, 52, 7, 100, -4, -8, 45, 112, 30, -12, 98, -26, 111, -30, -94, -117, -4, 110, -117, -123, 23, 113, -60, 23, -123, 123, -12, -120, -23, -49, -109, 44, -112, 35, 14, 11, 50, 40, -128, -101, 64, 125, -11, 126, -19, -59, -81, -78, 45, -69, 122, 81, -88, 21, -95, -94, -30, 23, 13, -44, -77, 4, -12, -47, 5, 109, 3, -26, 73, 84, 63, 79, 80, -89, 34, 114, -95, 76, 24, 123, -14, -59, 93, 62, 21, 95, 101, 103, -65, -70, -108, -27, -7, 113, -54, 17, 81, -19, -87, -54, 109, -8, 110, 58, -115, -2, -127, 51, -47, 114, -108, -96, -104, -92, -18, -49, 88, 53, 127, -74, 52, -68, -123, -108, 73, -110, -124, -98, -67, -39, 69, 22, -93, 13, -61, 65, 12, -35, 12, -47, -18, 24, 19, -3, -57, -8, -104, 29, 56, 34, 84, 22, 48, 101, 32, 37, -58, 18, -4, -2, 97, 95, -50, -21, 105, 104, -52, -35, -100, -34, -37, 66, 127, -52, -31, 42, 64, 30, 114, 13, 15, 120, 96, -104, 54, 42, -35, -5, -91, -96, 12, -58, -7, 117, 31, 94, 57, 120, 37, -101, -12, -105, 28, -37, -53, -31, 86, 73, -114, 107, -123, -113, 96, 124, 83, -49, -63, 28, 46, 80, -40, 36, 79, 28, -52, 100, -45, -94, -18, 21, 56, 34, -6, 73, 68, -124, 33, -125, 39, 89, 95, 19, -10, 19, -15, 20, -14, -89, -17, -2, 77, -115, 5, -1, -58, -17, -106, -40, -83, -17, -95, -96, 82, 0, -93, -117, 94, -66, -33, -110, -25, 56, 122, 84, -103, -102, -35, -1, 46, 35, 2, 35, 114, 85, -33, -68, -124, 81, 32, -6, -19, 2, 94, -72, 7, -88, 48, 92, 120, 17, 84, -107, 46, -67, 104, 34, -21, -1, -106, 106, -89, 33, 81, 88, -103, -2, -3, -7, 63, -122, -49, 103, 101, -77, -91, -15, 83, -96, -71, -59, -71, -31, -25, -49, 126, -7, -87, -109, -106, 61, -14, 66, 43, -99, -42, -92, -74, 106, 77, -70, -75, 48, 20, 36, -4, 47, 49, 93, 83, -13, 67, -122, -39, -59, -41, -28, -24, 59, -115, -48, 0, -45, 34, 93, -32, 80, -50, -127, -123, -6, -76, -76, 8, 11, 39, -104, 56, -87, 25, -104, -40, -123, -107, -51, -33, -90, 117, 13, 46, 69, -78, -43, 80, 92, 37, 119, 75, -51, 87, -31, -50, -113, -108, -53, -39, -116, 25, 53, 38, 92, -78, 27, -58, -12, -14, 17, -98, 93, 7, 0, 80, 40, -30, 115, 16, -40, -85, 68, -70, 64, -34, -56, 124, 68, -42, 75, 28, -95, -90, -1, -127, 16, 95, 58, 20, 15, 107, -2, 12, -89, -84, -24, -101, -79, 1, 66, 21, -63, 68, 116, -81, 28, -94, 107, 101, -24, 117, -54, 114, 59, 62, -70, -104, -22, -70, -109, -101, 116, -23, 74, -28, 93, 10, -120, -9, -29, 105, -27, -11, -78, -50, 29, -121, -63, 38, -46, 111, 61, -62, 77, 30, -98, -66, -99, 61, 90, 52, -25, 27, 10, 29, 84, 62, 27, 73, -124, -107, -95, 75, 90, -77, 64, 79, -126, 55, 32, 113, 66, 61, -24, -88, -87, -118, -83, 6, -7, -47, -24, 45, -48, -114, -31, 23, 106, -4, 81, 66, -59, -85, -68, 108, 12, -16, 92, 46, 108, -61, 56, -33, -18, 111, -12, 79, -74, -17, -118, 109, -76, 20, -123, -118, 51, -63, 88, -128, -79, -42, -56, -96, 90, 94, -115, 67, 127, 53, 84, -30, 107, 24, -102, 86, 20, -106, 68, 118, 11, 125, -27, -36, -94, 106, 39, 32, -64, -54, 118, 83, 81, 114, 60, -29, 101, -62, 53, 49, 75, -13, 47, -15, -81, -87, -48, 5, -65, 58, 30, -28, -113, 84, -127, 89, 96, -10, -120, -91, 65, 111, -9, 96, -21, 110, -98, 40, 105, -24, 13, -75, -121, 116, -3, -115, -53, 115, 101, 39, 110, 56, -65, -61, 107, -121, -111, 72, -2, 60, 65, -113, -67, -117, 19, -29, 55, -76, -19, -91, -9, 85, 56, 112, 65, -24, -64, -33, -36, 94, -47, -54, 35, -91, -22, 55, -59, -76, -16, 83, -54, 62, -63, 120, -24, -123, 67, -111, 2, -62, 4, -66, -80, -128, 4, -40, -18, 116, 87, -22, 83, 85, -88, -37, 64, 122, -21, -107, 60, 55, 34, -83, 56, -42, 93, 78, -120, -20, 5, -114, 83, -98, 41, -60, -26, 24, -22, 0, 39, -84, -86, -103, -13, -41, 122, 33, -84, -51, 65, -110, 60, 86, 119, -50, -99, 4, -120, -44, -37, 105, 95, -112, 78, 8, 84, -30, 85, 71, 5, 8, 125, 75, 42, -76, 40, 44, 33, 110, 105, 100, -66, 109, 59, 122, 38, -3, 115, 99, -17, 111, -98, -11, 115, -120, -76, 109, -108, 93, 77, -86, 69, -28, -93, -59, 48, 126, -98, -66, -32, 24, 49, 104, 17, -119, 35, -3, 63, 64, 91, -43, 89, -42, 62, 79, 99, -91, -44, -4, -107, 60, 43, 28, 14, -65, -94, -60, -58, 63, 28, -20, 62, -46, -114, -119, 5, 15, -82, 49, 100, -25, -44, 2, -57, 71, 57, -93, -24, -28}

#define TENSOR_DENSE_KERNEL_0_DEC_BITS {9}

#define TENSOR_DENSE_BIAS_0 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

#define TENSOR_DENSE_BIAS_0_DEC_BITS {9}

#define DENSE_BIAS_LSHIFT {10}

#define DENSE_OUTPUT_RSHIFT {9}

#define TENSOR_DENSE_1_KERNEL_0 {-77, 22, 20, -77, -36, -25, 67, -46, -26, -4, 56, 20, 55, 71, -24, -13, 38, -79, -53, -47, -59, -64, -33, -33, 5, -11, -11, -39, -83, 64, 8, 73, 26, -68, 48, 63, -70, -28, 53, -25, 42, 10, -39, -62, 38, 46, -46, -31, -47, 41, 16, -50, 60, 1, -88, 60, 19, 47, 56, 22, -13, -12, -19, -39, 79, 4, -9, -2, -69, -21, -47, 59, -87, 30, 85, -65, 66, -56, -12, -50, 12, -46, 78, -34, -17, -46, -38, 72, 25, 25, 11, 36, -82, -11, -8, -65}

#define TENSOR_DENSE_1_KERNEL_0_DEC_BITS {8}

#define TENSOR_DENSE_1_BIAS_0 {0, 0}

#define TENSOR_DENSE_1_BIAS_0_DEC_BITS {8}

#define DENSE_1_BIAS_LSHIFT {10}

#define DENSE_1_OUTPUT_RSHIFT {7}


/* output q format for each layer */
#define INPUT_2_OUTPUT_DEC 7
#define INPUT_2_OUTPUT_OFFSET 0
#define CONV1D_OUTPUT_DEC 7
#define CONV1D_OUTPUT_OFFSET 0
#define BATCH_NORMALIZATION_OUTPUT_DEC 7
#define BATCH_NORMALIZATION_OUTPUT_OFFSET 0
#define LEAKY_RE_LU_OUTPUT_DEC 7
#define LEAKY_RE_LU_OUTPUT_OFFSET 0
#define CONV1D_1_OUTPUT_DEC 8
#define CONV1D_1_OUTPUT_OFFSET 0
#define BATCH_NORMALIZATION_1_OUTPUT_DEC 8
#define BATCH_NORMALIZATION_1_OUTPUT_OFFSET 0
#define LEAKY_RE_LU_1_OUTPUT_DEC 8
#define LEAKY_RE_LU_1_OUTPUT_OFFSET 0
#define MAX_POOLING2D_OUTPUT_DEC 8
#define MAX_POOLING2D_OUTPUT_OFFSET 0
#define DROPOUT_OUTPUT_DEC 8
#define DROPOUT_OUTPUT_OFFSET 0
#define CONV1D_2_OUTPUT_DEC 8
#define CONV1D_2_OUTPUT_OFFSET 0
#define BATCH_NORMALIZATION_2_OUTPUT_DEC 8
#define BATCH_NORMALIZATION_2_OUTPUT_OFFSET 0
#define LEAKY_RE_LU_2_OUTPUT_DEC 8
#define LEAKY_RE_LU_2_OUTPUT_OFFSET 0
#define CONV1D_3_OUTPUT_DEC 9
#define CONV1D_3_OUTPUT_OFFSET 0
#define BATCH_NORMALIZATION_3_OUTPUT_DEC 9
#define BATCH_NORMALIZATION_3_OUTPUT_OFFSET 0
#define LEAKY_RE_LU_3_OUTPUT_DEC 9
#define LEAKY_RE_LU_3_OUTPUT_OFFSET 0
#define MAX_POOLING2D_1_OUTPUT_DEC 9
#define MAX_POOLING2D_1_OUTPUT_OFFSET 0
#define DROPOUT_1_OUTPUT_DEC 9
#define DROPOUT_1_OUTPUT_OFFSET 0
#define CONV1D_4_OUTPUT_DEC 10
#define CONV1D_4_OUTPUT_OFFSET 0
#define BATCH_NORMALIZATION_4_OUTPUT_DEC 10
#define BATCH_NORMALIZATION_4_OUTPUT_OFFSET 0
#define LEAKY_RE_LU_4_OUTPUT_DEC 10
#define LEAKY_RE_LU_4_OUTPUT_OFFSET 0
#define MAX_POOLING2D_2_OUTPUT_DEC 10
#define MAX_POOLING2D_2_OUTPUT_OFFSET 0
#define DROPOUT_2_OUTPUT_DEC 10
#define DROPOUT_2_OUTPUT_OFFSET 0
#define FLATTEN_OUTPUT_DEC 10
#define FLATTEN_OUTPUT_OFFSET 0
#define DENSE_OUTPUT_DEC 10
#define DENSE_OUTPUT_OFFSET 0
#define RE_LU_OUTPUT_DEC 10
#define RE_LU_OUTPUT_OFFSET 0
#define DENSE_1_OUTPUT_DEC 11
#define DENSE_1_OUTPUT_OFFSET 0

/* bias shift and output shift for none-weighted layer */

/* tensors and configurations for each layer */
static int8_t nnom_input_data[800] = {0};

const nnom_shape_data_t tensor_input_2_dim[] = {1, 800, 1};
const nnom_qformat_param_t tensor_input_2_dec[] = {7};
const nnom_qformat_param_t tensor_input_2_offset[] = {0};
const nnom_tensor_t tensor_input_2 = {
    .p_data = (void*)nnom_input_data,
    .dim = (nnom_shape_data_t*)tensor_input_2_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_input_2_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_input_2_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};

const nnom_io_config_t input_2_config = {
    .super = {.name = "input_2"},
    .tensor = (nnom_tensor_t*)&tensor_input_2
};
const int8_t tensor_conv1d_kernel_0_data[] = TENSOR_CONV1D_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_kernel_0_dim[] = {24, 1, 4};
const nnom_qformat_param_t tensor_conv1d_kernel_0_dec[] = TENSOR_CONV1D_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_kernel_0 = {
    .p_data = (void*)tensor_conv1d_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_bias_0_data[] = TENSOR_CONV1D_BIAS_0;

const nnom_shape_data_t tensor_conv1d_bias_0_dim[] = {4};
const nnom_qformat_param_t tensor_conv1d_bias_0_dec[] = TENSOR_CONV1D_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_bias_0 = {
    .p_data = (void*)tensor_conv1d_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_output_shift[] = CONV1D_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_bias_shift[] = CONV1D_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_config = {
    .super = {.name = "conv1d"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_bias_shift, 
    .filter_size = 4,
    .kernel_size = {24},
    .stride_size = {3},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_VALID
};
const int8_t tensor_conv1d_1_kernel_0_data[] = TENSOR_CONV1D_1_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_1_kernel_0_dim[] = {24, 4, 8};
const nnom_qformat_param_t tensor_conv1d_1_kernel_0_dec[] = TENSOR_CONV1D_1_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_1_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_1_kernel_0 = {
    .p_data = (void*)tensor_conv1d_1_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_1_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_1_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_1_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_1_bias_0_data[] = TENSOR_CONV1D_1_BIAS_0;

const nnom_shape_data_t tensor_conv1d_1_bias_0_dim[] = {8};
const nnom_qformat_param_t tensor_conv1d_1_bias_0_dec[] = TENSOR_CONV1D_1_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_1_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_1_bias_0 = {
    .p_data = (void*)tensor_conv1d_1_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_1_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_1_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_1_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_1_output_shift[] = CONV1D_1_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_1_bias_shift[] = CONV1D_1_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_1_config = {
    .super = {.name = "conv1d_1"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_1_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_1_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_1_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_1_bias_shift, 
    .filter_size = 8,
    .kernel_size = {24},
    .stride_size = {1},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_VALID
};

const nnom_pool_config_t max_pooling2d_config = {
    .super = {.name = "max_pooling2d"},
    .padding_type = PADDING_VALID,
    .output_shift = 0,
    .kernel_size = {1, 2},
    .stride_size = {1, 2},
    .num_dim = 2
};
const int8_t tensor_conv1d_2_kernel_0_data[] = TENSOR_CONV1D_2_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_2_kernel_0_dim[] = {12, 8, 12};
const nnom_qformat_param_t tensor_conv1d_2_kernel_0_dec[] = TENSOR_CONV1D_2_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_2_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_2_kernel_0 = {
    .p_data = (void*)tensor_conv1d_2_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_2_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_2_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_2_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_2_bias_0_data[] = TENSOR_CONV1D_2_BIAS_0;

const nnom_shape_data_t tensor_conv1d_2_bias_0_dim[] = {12};
const nnom_qformat_param_t tensor_conv1d_2_bias_0_dec[] = TENSOR_CONV1D_2_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_2_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_2_bias_0 = {
    .p_data = (void*)tensor_conv1d_2_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_2_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_2_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_2_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_2_output_shift[] = CONV1D_2_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_2_bias_shift[] = CONV1D_2_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_2_config = {
    .super = {.name = "conv1d_2"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_2_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_2_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_2_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_2_bias_shift, 
    .filter_size = 12,
    .kernel_size = {12},
    .stride_size = {2},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_VALID
};
const int8_t tensor_conv1d_3_kernel_0_data[] = TENSOR_CONV1D_3_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_3_kernel_0_dim[] = {12, 12, 12};
const nnom_qformat_param_t tensor_conv1d_3_kernel_0_dec[] = TENSOR_CONV1D_3_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_3_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_3_kernel_0 = {
    .p_data = (void*)tensor_conv1d_3_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_3_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_3_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_3_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_3_bias_0_data[] = TENSOR_CONV1D_3_BIAS_0;

const nnom_shape_data_t tensor_conv1d_3_bias_0_dim[] = {12};
const nnom_qformat_param_t tensor_conv1d_3_bias_0_dec[] = TENSOR_CONV1D_3_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_3_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_3_bias_0 = {
    .p_data = (void*)tensor_conv1d_3_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_3_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_3_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_3_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_3_output_shift[] = CONV1D_3_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_3_bias_shift[] = CONV1D_3_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_3_config = {
    .super = {.name = "conv1d_3"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_3_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_3_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_3_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_3_bias_shift, 
    .filter_size = 12,
    .kernel_size = {12},
    .stride_size = {1},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_VALID
};

const nnom_pool_config_t max_pooling2d_1_config = {
    .super = {.name = "max_pooling2d_1"},
    .padding_type = PADDING_VALID,
    .output_shift = 0,
    .kernel_size = {1, 2},
    .stride_size = {1, 2},
    .num_dim = 2
};
const int8_t tensor_conv1d_4_kernel_0_data[] = TENSOR_CONV1D_4_KERNEL_0;

const nnom_shape_data_t tensor_conv1d_4_kernel_0_dim[] = {5, 12, 12};
const nnom_qformat_param_t tensor_conv1d_4_kernel_0_dec[] = TENSOR_CONV1D_4_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_4_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_4_kernel_0 = {
    .p_data = (void*)tensor_conv1d_4_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_4_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_4_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_4_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 3,
    .bitwidth = 8
};
const int8_t tensor_conv1d_4_bias_0_data[] = TENSOR_CONV1D_4_BIAS_0;

const nnom_shape_data_t tensor_conv1d_4_bias_0_dim[] = {12};
const nnom_qformat_param_t tensor_conv1d_4_bias_0_dec[] = TENSOR_CONV1D_4_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_conv1d_4_bias_0_offset[] = {0};
const nnom_tensor_t tensor_conv1d_4_bias_0 = {
    .p_data = (void*)tensor_conv1d_4_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_conv1d_4_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_conv1d_4_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_conv1d_4_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t conv1d_4_output_shift[] = CONV1D_4_OUTPUT_RSHIFT;
const nnom_qformat_param_t conv1d_4_bias_shift[] = CONV1D_4_BIAS_LSHIFT;
const nnom_conv2d_config_t conv1d_4_config = {
    .super = {.name = "conv1d_4"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_conv1d_4_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_conv1d_4_bias_0,
    .output_shift = (nnom_qformat_param_t *)&conv1d_4_output_shift, 
    .bias_shift = (nnom_qformat_param_t *)&conv1d_4_bias_shift, 
    .filter_size = 12,
    .kernel_size = {5},
    .stride_size = {2},
    .padding_size = {0, 0},
    .dilation_size = {1},
    .padding_type = PADDING_VALID
};

const nnom_pool_config_t max_pooling2d_2_config = {
    .super = {.name = "max_pooling2d_2"},
    .padding_type = PADDING_VALID,
    .output_shift = 0,
    .kernel_size = {1, 2},
    .stride_size = {1, 2},
    .num_dim = 2
};

const nnom_flatten_config_t flatten_config = {
    .super = {.name = "flatten"}
};
const int8_t tensor_dense_kernel_0_data[] = TENSOR_DENSE_KERNEL_0;

const nnom_shape_data_t tensor_dense_kernel_0_dim[] = {48, 48};
const nnom_qformat_param_t tensor_dense_kernel_0_dec[] = TENSOR_DENSE_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_dense_kernel_0 = {
    .p_data = (void*)tensor_dense_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_dense_bias_0_data[] = TENSOR_DENSE_BIAS_0;

const nnom_shape_data_t tensor_dense_bias_0_dim[] = {48};
const nnom_qformat_param_t tensor_dense_bias_0_dec[] = TENSOR_DENSE_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_bias_0_offset[] = {0};
const nnom_tensor_t tensor_dense_bias_0 = {
    .p_data = (void*)tensor_dense_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t dense_output_shift[] = DENSE_OUTPUT_RSHIFT;
const nnom_qformat_param_t dense_bias_shift[] = DENSE_BIAS_LSHIFT;
const nnom_dense_config_t dense_config = {
    .super = {.name = "dense"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_dense_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_dense_bias_0,
    .output_shift = (nnom_qformat_param_t *)&dense_output_shift,
    .bias_shift = (nnom_qformat_param_t *)&dense_bias_shift
};
const int8_t tensor_dense_1_kernel_0_data[] = TENSOR_DENSE_1_KERNEL_0;

const nnom_shape_data_t tensor_dense_1_kernel_0_dim[] = {48, 2};
const nnom_qformat_param_t tensor_dense_1_kernel_0_dec[] = TENSOR_DENSE_1_KERNEL_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_1_kernel_0_offset[] = {0};
const nnom_tensor_t tensor_dense_1_kernel_0 = {
    .p_data = (void*)tensor_dense_1_kernel_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_1_kernel_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_1_kernel_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_1_kernel_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 2,
    .bitwidth = 8
};
const int8_t tensor_dense_1_bias_0_data[] = TENSOR_DENSE_1_BIAS_0;

const nnom_shape_data_t tensor_dense_1_bias_0_dim[] = {2};
const nnom_qformat_param_t tensor_dense_1_bias_0_dec[] = TENSOR_DENSE_1_BIAS_0_DEC_BITS;
const nnom_qformat_param_t tensor_dense_1_bias_0_offset[] = {0};
const nnom_tensor_t tensor_dense_1_bias_0 = {
    .p_data = (void*)tensor_dense_1_bias_0_data,
    .dim = (nnom_shape_data_t*)tensor_dense_1_bias_0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_dense_1_bias_0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_dense_1_bias_0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_qformat_param_t dense_1_output_shift[] = DENSE_1_OUTPUT_RSHIFT;
const nnom_qformat_param_t dense_1_bias_shift[] = DENSE_1_BIAS_LSHIFT;
const nnom_dense_config_t dense_1_config = {
    .super = {.name = "dense_1"},
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .weight = (nnom_tensor_t*)&tensor_dense_1_kernel_0,
    .bias = (nnom_tensor_t*)&tensor_dense_1_bias_0,
    .output_shift = (nnom_qformat_param_t *)&dense_1_output_shift,
    .bias_shift = (nnom_qformat_param_t *)&dense_1_bias_shift
};
static int8_t nnom_output_data[2] = {0};

const nnom_shape_data_t tensor_output0_dim[] = {2};
const nnom_qformat_param_t tensor_output0_dec[] = {DENSE_1_OUTPUT_DEC};
const nnom_qformat_param_t tensor_output0_offset[] = {0};
const nnom_tensor_t tensor_output0 = {
    .p_data = (void*)nnom_output_data,
    .dim = (nnom_shape_data_t*)tensor_output0_dim,
    .q_dec = (nnom_qformat_param_t*)tensor_output0_dec,
    .q_offset = (nnom_qformat_param_t*)tensor_output0_offset,
    .qtype = NNOM_QTYPE_PER_TENSOR,
    .num_dim = 1,
    .bitwidth = 8
};

const nnom_io_config_t output0_config = {
    .super = {.name = "output0"},
    .tensor = (nnom_tensor_t*)&tensor_output0
};
/* model version */
#define NNOM_MODEL_VERSION (10000*0 + 100*4 + 3)

/* nnom model */
static nnom_model_t* nnom_model_create(void)
{
	static nnom_model_t model;
	nnom_layer_t* layer[19];

	check_model_version(NNOM_MODEL_VERSION);
	new_model(&model);

	layer[0] = input_s(&input_2_config);
	layer[1] = model.hook(conv2d_s(&conv1d_config), layer[0]);
	layer[2] = model.active(act_leaky_relu(0.300000f), layer[1]);
	layer[3] = model.hook(conv2d_s(&conv1d_1_config), layer[2]);
	layer[4] = model.active(act_leaky_relu(0.300000f), layer[3]);
	layer[5] = model.hook(maxpool_s(&max_pooling2d_config), layer[4]);
	layer[6] = model.hook(conv2d_s(&conv1d_2_config), layer[5]);
	layer[7] = model.active(act_leaky_relu(0.300000f), layer[6]);
	layer[8] = model.hook(conv2d_s(&conv1d_3_config), layer[7]);
	layer[9] = model.active(act_leaky_relu(0.300000f), layer[8]);
	layer[10] = model.hook(maxpool_s(&max_pooling2d_1_config), layer[9]);
	layer[11] = model.hook(conv2d_s(&conv1d_4_config), layer[10]);
	layer[12] = model.active(act_leaky_relu(0.300000f), layer[11]);
	layer[13] = model.hook(maxpool_s(&max_pooling2d_2_config), layer[12]);
	layer[14] = model.hook(flatten_s(&flatten_config), layer[13]);
	layer[15] = model.hook(dense_s(&dense_config), layer[14]);
	layer[16] = model.active(act_relu(), layer[15]);
	layer[17] = model.hook(dense_s(&dense_1_config), layer[16]);
	layer[18] = model.hook(output_s(&output0_config), layer[17]);
	model_compile(&model, layer[0], layer[18]);
	return &model;
}
